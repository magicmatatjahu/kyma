// Code generated by failery v1.0.0. DO NOT EDIT.

package disabled

import context "context"

import gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"

// Resolver is an autogenerated failing mock type for the Resolver type
type Resolver struct {
	err error
}

// NewResolver creates a new Resolver type instance
func NewResolver(err error) *Resolver {
	return &Resolver{err: err}
}

// Get provides a failing mock function with given fields: ctx, schema, name, namespace
func (_m *Resolver) Get(ctx context.Context, schema gqlschema.SchemaResourceInput, name string, namespace *string) (*gqlschema.Resource, error) {
	var r0 *gqlschema.Resource
	var r1 error
	r1 = _m.err

	return r0, r1
}

// List provides a failing mock function with given fields: ctx, schema, namespace
func (_m *Resolver) List(ctx context.Context, schema gqlschema.SchemaResourceInput, namespace *string) (gqlschema.ResourceListOutput, error) {
	var r0 gqlschema.ResourceListOutput
	var r1 error
	r1 = _m.err

	return r0, r1
}

// ResourceSpec provides a failing mock function with given fields: ctx, obj, fields, rootField
func (_m *Resolver) ResourceSpec(ctx context.Context, obj *gqlschema.Resource, fields []gqlschema.ResourceFieldInput, rootField *string) (gqlschema.ResourceSpecOutput, error) {
	var r0 gqlschema.ResourceSpecOutput
	var r1 error
	r1 = _m.err

	return r0, r1
}

// ResourceSubResources provides a failing mock function with given fields: ctx, parent, schema, namespace
func (_m *Resolver) ResourceSubResources(ctx context.Context, parent *gqlschema.Resource, schema gqlschema.SchemaResourceInput, namespace *string) (gqlschema.ResourceListOutput, error) {
	var r0 gqlschema.ResourceListOutput
	var r1 error
	r1 = _m.err

	return r0, r1
}
