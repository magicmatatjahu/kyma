// Code generated by mockery v1.0.0. DO NOT EDIT.
package automock

import mock "github.com/stretchr/testify/mock"
import v1alpha2 "github.com/kyma-project/kyma/components/asset-store-controller-manager/pkg/apis/assetstore/v1alpha2"

// clusterAssetSvc is an autogenerated mock type for the clusterAssetSvc type
type clusterAssetSvc struct {
	mock.Mock
}

// List provides a mock function with given fields: groupName
func (_m *clusterAssetSvc) List(groupName string) ([]*v1alpha2.ClusterAsset, error) {
	ret := _m.Called(groupName)

	var r0 []*v1alpha2.ClusterAsset
	if rf, ok := ret.Get(0).(func(string) []*v1alpha2.ClusterAsset); ok {
		r0 = rf(groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha2.ClusterAsset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForDocsTopicByType provides a mock function with given fields: docsTopicName, typeArg
func (_m *clusterAssetSvc) ListForDocsTopicByType(docsTopicName string, typeArg *string) ([]*v1alpha2.ClusterAsset, error) {
	ret := _m.Called(docsTopicName, typeArg)

	var r0 []*v1alpha2.ClusterAsset
	if rf, ok := ret.Get(0).(func(string, *string) []*v1alpha2.ClusterAsset); ok {
		r0 = rf(docsTopicName, typeArg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha2.ClusterAsset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *string) error); ok {
		r1 = rf(docsTopicName, typeArg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
